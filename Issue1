Branch Forcing:
**HEAD is the current place where the pointer is pointing (ex. if you are on the branch master then the HEAD is there; if you are on the commit with name C2 then the HEAD points there.) 

e.g. git branch -f master C6

→ -f meaning force even the head is not pointing to that branch
→ master is the branch to move
→ C6 is the commit where the master will be moved

e.g. git branch -f bugFix HEAD~1

→ -f meaning force even the head is not pointing to that branch
→ bugFix is the branch that is needed to be moved
→ above the HEAD is where we are going to put the bugFix branch

e.g. git fetch origin

→ Gets the branch initialized in Github
→ Gets the branch not in local repository

e.g. git branch -a

→ shows all the branches in the repository


    git add files copies files (at their current state) to the stage.
    git commit saves a snapshot of the stage as a commit.
    git reset -- files unstages files; that is, it copies files from the latest commit to the stage. Use this command to "undo" a git add files. You can also git reset to unstage everything.
    git checkout -- files copies files from the stage to the working directory. Use this to throw away local changes.
